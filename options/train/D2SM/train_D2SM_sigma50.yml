# Modified SRResNet w/o BN from:
# Photo-Realistic Single Image Super-Resolution Using a Generative Adversarial Network
# Use perceptual loss before ReLU as ESRGAN does

# general settings
name: D2SM_sigma50
model_type: D2SMModel
scale: 4
num_gpu: 1  # set num_gpu: 0 for cpu mode
manual_seed: 0

# dataset and data loader settings
datasets:
  train:
    name: NoisyCityscape
    type: NoisyImageDataset
    dataroot_hq: /export/io83/data/kmei1/datasets/Cityscapes/leftImg8bit_train/
    io_backend:
      type: disk

    sigma: 50
    patch_size: 128
    use_hflip: true
    use_rot: true

    # data loader
    num_worker_per_gpu: 8
    batch_size_per_gpu: 4
    dataset_enlarge_ratio: 1
    prefetch_mode: ~

  val:
    name: NoisyCityscape
    type: SingleImageDataset
    dataroot_lq: /export/io83/data/kmei1/datasets/Cityscapes/noisy_citysaceps/50
    io_backend:
      type: disk

# network structures
network_g:
  type: FFDNet
  num_in_ch: 3
  num_out_ch: 3
  num_feat: 64
  num_block: 16

# path
path:
  pretrain_network_g: ~
  strict_load_g: true
  resume_state: ~

# training settings
train:
  ema_decay: 0.999
  optim_g:
    type: Adam
    lr: !!float 1e-4
    weight_decay: 0
    betas: [0.9, 0.99]

  scheduler:
    type: MultiStepLR
    milestones: [50000, 100000, 200000, 300000]
    gamma: 0.5

  total_iter: 400000
  warmup_iter: -1  # no warm up

  # losses
  pixel_opt:
    type: L1Loss
    loss_weight: !!float 1e-2
    reduction: mean
  d2sm_opt:
    type: D2SMLoss
    layer_weights:
      'conv5_4': 1  # before relu
    vgg_type: vgg19
    use_input_norm: true
    range_norm: false

# validation settings
val:
  val_freq: !!float 5e3
  save_img: true

  metrics:
    psnr: # metric name, can be arbitrary
      type: calculate_psnr
      crop_border: 4
      test_y_channel: false

# logging settings
logger:
  print_freq: 100
  save_checkpoint_freq: !!float 5e3
  use_tb_logger: true
  wandb:
    project: ~
    resume_id: ~

# dist training settings
dist_params:
  backend: nccl
  port: 29500
